package com.kaidenho.gamelooptest;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Rect;
import android.graphics.RectF;
import android.opengl.GLES20;
import android.opengl.GLUtils;
import android.util.Log;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.ShortBuffer;

/**
 * GameObject is a drawable BaseObject.
 *
 * Created by Kaiden Ho on 2016-10-02.
 */
public class GameObject extends BaseObject {
    private final static String TAG = GameObject.class.getSimpleName();

    // Buffers
    private FloatBuffer mVertexBuffer;
    private FloatBuffer mTextureBuffer;
    private ShortBuffer mDrawlistBuffer;

    // References for openGL rendering
    private final static short[] mIndices = new short[]{0, 1, 2, 0, 2, 3};

    // Image source
    private int mTextureIndex;

    // Location
    private RectF mLocationRect = new RectF();

    // Debug
    private String mName;

    /**
     *
     * @param textureIndex this is created when the bitmaps are first generated by RenderSystem
     * @param locationRect pass in initial location. Coordinates should be in scaled units.
     * @param name
     */
    public GameObject (int textureIndex, RectF locationRect, String name) {
        Log.v(TAG, "GameObject created");

        mTextureIndex = textureIndex;
        mName = name;

        // Initial location
        mLocationRect = new RectF(locationRect);
        /*mLocationRect.left = (int)(locationRect.left * mScaling.gameUnit);
        mLocationRect.top = (int)(locationRect.top * mScaling.gameUnit);
        mLocationRect.right = (int)(locationRect.right * mScaling.gameUnit);
        mLocationRect.bottom = (int)(locationRect.bottom * mScaling.gameUnit);*/
    }

    @Override
    public void update(long timeDelta){
        BaseObject.renderSystem.add(this);
        //Log.d(TAG,"RenderQueue size is " + BaseObject.renderSystem.getSize());
    }

   /* public FloatBuffer updateLocation() {
        FloatBuffer mVertexBuffer;
        float [] mVertices = new float[12];

        // Vertices coordinates are set in groups of three (x,y,z)
        // Coordinates should be given in counterclockwise order due to openGL rendering procedures
        mVertices[0] = mLocationRect.left;   mVertices[1] = mLocationRect.top;   mVertices[2] = 0;
        mVertices[3] = mLocationRect.left;   mVertices[4] = mLocationRect.bottom;   mVertices[5] = 0;
        mVertices[6] = mLocationRect.right; mVertices[7] = mLocationRect.bottom;   mVertices[8] = 0;
        mVertices[9] = mLocationRect.right; mVertices[10] = mLocationRect.top; mVertices[11] = 0;

        // Set the vertex buffer
        ByteBuffer bb = ByteBuffer.allocateDirect(mVertices.length * 4);
        bb.order(ByteOrder.nativeOrder());
        mVertexBuffer = bb.asFloatBuffer();
        mVertexBuffer.put(mVertices);
        mVertexBuffer.position(0);

        //Log.v(TAG, "Location - " + mLocationRect.left + ", " + mLocationRect.right);

        return mVertexBuffer;
    }*/

    public RectF getLocationRect() {
        return mLocationRect;
    }

    public String getName() {
        return mName;
    }

    public int getTextureIndex() {
        return mTextureIndex;
    }

    public void setTextureIndex(int newTextureIndex) { mTextureIndex = newTextureIndex; }
}
